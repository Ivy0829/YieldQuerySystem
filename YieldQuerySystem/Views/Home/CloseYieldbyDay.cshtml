@using YieldQuerySystem.Models.ViewModel
@model DailyYieldSearchViewModel
@{
    ViewData["Title"] = "Yield Summary";
    @*if (ViewData["Title"] != null)
        {
            <script>alert(ViewData["Massage"])</script>

        }*@
}

<div class="interface">
    <div class="intro">
        <partial name="_DailyYieldSearchBar" model="Model" />
        <canvas id="ChartJS"></canvas>
        <table id=queryTable class="table table-bordered">
        </table>
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            $("#SummaryYield").addClass("active");

            $(".TDCust3Code").hide();

            var $table = $("#queryTable");

            var sumOverAllYield;
            var myLineChart;
            var MonthAry = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
            var YearCount = [];
            var MonthCount = [];
            var WeeklyCount = [];
            var DayCount = [];
            function checkTime() {
                var datedif = (new Date($("txtDateEnd").val()) - new Date($("txtDateStart").val())) / 1000 / 60 / 60 / 24;
                if ($("#txtDateStart").val() == '' || $("txtDateEnd").val() == '') {
                    alert("請輸入時間區間");
                    return;
                }
                else if (datedif > 90) {
                    alert("請輸入時間區間在三個月(90天)內");
                    return false;
                }

                return true;
            }

            function mmddformat(StartTime) {
                StartTime = new Date(StartTime);
                showmonth = StartTime.getMonth() + 1;
                showday = StartTime.getDate();
                if (showmonth.toString().length == 1) {
                    showmonth = "0" + showmonth;
                }
                if (showday.toString().length == 1) {
                    showday = "0" + showday;
                }
                arydate = showmonth + "/" + showday;
                return arydate;
            }

            function WeekFromYear(DateT) {
                var dateYear = DateT.getFullYear();
                var dateMonth = DateT.getMonth() + 1;
                var dateDay = DateT.getDate();
                var dayMS = 24 * 60 * 60 * 1000;
                var date1 = new Date(dateYear, 0, 1);
                var firstDay = (7 - date1.getDay()) * dayMS;
                var weekMS = 7 * dayMS;
                date1 = date1.getTime();
                DateT = DateT.getTime();

                return Math.ceil((DateT - date1 - firstDay) / weekMS) + 1;
            }

            function initTable() {
                $("#queryTable > thead").remove();
                $("#queryTable > tbody").remove();
                YearCount.length = 0;
                MonthCount.length = 0;
                WeeklyCount.length = 0;
                DayCount.length = 0;
            }
       /////////////////////////////
            function gettableheadstring(Config)
            {
                appendstring = '<th scope="col">StageCode</th>' + '<th scope="col">LossCode</th>' + '<th scope="col">Date</th>';

                Config.YearConfig.forEach(function(item)
                {
                    appendstring += '<th scope="col" id="Y' + item + '">Y' + item + '</th>';
                })
                Config.MonthConfig.forEach(function (item)
                {
                    appendstring += '<th scope="col" id="M' + item + '">' + item +  '</th>';
                })
                Config.WeeklyConfig.forEach(function (item)
                {
                    appendstring += '<th scope="col" id="W' + item + '">W' + item +'</th>';
                })
                Config.DayConfig.forEach(function (item)
                {
                    appendstring += '<th scope="col" id="D' + item + '">' + item + '</th>';
                })            
                    return appendstring
            }

            function checkqtyvar(item, DataTitle)
            {
                var QtyNumber = "";
                switch (DataTitle) {
                    case "Assy Input qty":
                        QtyNumber = item.QtyIssue;
                        break;
                    case "Assy Output qty":
                        QtyNumber = item.QtyOut;
                        break;
                    case "Assy Yield":
                        QtyNumber = Math.round((item.QtyOut / item.QtyIssue) * 100).toFixed(3) + "%";
                        break;
                    case "Loss Qty":
                        QtyNumber = item.LossQty;
                        break;
                }
                return QtyNumber;
            }

            function getqtydata(appendstring, data, DataTitle)
            {
                appendstring += "<tr>";
                appendstring += '<td></td>' + '<td></td>' + "<td>" + DataTitle + "</td>"

                for (var i = 0; i < data.Config.YearConfig.length; i++) {
                    data.YearLotView.forEach(function (item) {
                        if (item.YearCode == data.Config.YearConfig[i]) {
                            appendstring += '<td>' + checkqtyvar(item, DataTitle) + '</td>'
                        }
                        else {
                            appendstring += '<td>' + " " + '</td>'
                        }
                    })
                }
                for (var i = 0; i < data.Config.MonthConfig.length; i++) {
                    var matchflag = false;
                    data.MonthLotView.forEach(function (item) {
                        var str = item.ShowDate + "'"+ item.YearCode;
                        if (str == data.Config.MonthConfig[i]) {
                            appendstring += '<td>' + checkqtyvar(item,DataTitle) + '</td>';
                            matchflag = true;
                        }
                    });
                    if (!matchflag) {
                        appendstring += '<td>' + "" + '</td>';
                    }
                }
                for (var i = 0; i < data.Config.WeeklyConfig.length; i++) {
                    var matchflag = false;
                    data.WeeklyLotView.forEach(function (item) {
                        var str = item.ShowDate + "'" +item.YearCode;
                        if (str == data.Config.WeeklyConfig[i]) {
                            appendstring += '<td>' + checkqtyvar(item, DataTitle) + '</td>';
                            matchflag = true;
                        }
                    });
                    if (!matchflag) {
                        appendstring += '<td>' + "" + '</td>';
                    }
                }
                for (var i = 0; i < data.Config.DayConfig.length; i++) {
                    var matchflag = false;
                    data.DayLotView.forEach(function (item) {
                        var str = item.ShowDate + item.YearCode;
                        if (str == data.Config.DayConfig[i]) {
                            appendstring += '<td>' + checkqtyvar(item, DataTitle) + '</td>';
                            matchflag = true;
                        }
                    });
                    if (!matchflag) {
                        appendstring += '<td>' + "" + '</td>';
                    }
                }
                appendstring += "</tr>";
                return appendstring;
            }

            function gettablestring(data) {

                appendstring = '<tr>';
                appendstring += '</tr>'
                appendstring = getqtydata(appendstring, data, "Assy Input qty");
                appendstring = getqtydata(appendstring, data, "Assy Output qty");
                appendstring = getqtydata(appendstring, data, "Assy Yield");
                appendstring = getqtydata(appendstring, data, "Loss Qty");

                return appendstring;
            }



            function ErrorCodeDataString(item,dataitems,Config)
            {
                let appendstring = ''
                dataitems.forEach(function (dataitem) {
                    if (item.StageCode == dataitem.StageCode && item.LossCode == dataitem.LossCode) {
                        var str = dataitem.ShowDate + "'" + dataitem.YearCode;
                        for (var i = 0; i < Config.length; i++) {
                            if (str == Config[i]) {
                                appendstring += '<td>' + dataitem.Cum + '</td>'
                            }
                            else {
                                appendstring += '<td>' + "0" + '</td>'
                            }
                        }
                    }
                });
                return appendstring;
            }






            function ErrorCodeTableString(data) {
                appendstring = '';
                var flag = false;
                data.YearLossDataView.forEach(function (item) {
                    appendstring += '<tr>'
                    appendstring += '<td>' + item.StageCode + '</td>' + '<td>' + item.LossCode + '</td>' + '<td>' + item.LossDesc + '</td>';
                    //年
                    var str =   item.YearCode;
                    for (var i = 0; i < data.Config.YearConfig.length; i++)
                    {
                        if (item.YearCode === data.Config.YearConfig[i])
                        {
                           appendstring +='<td>'+item.Cum+'</td>' 
                        }
                        else
                        {
                            appendstring += '<td>' + "0" + '</td>'
                        }
                    }

                    //data.MonthLossDataView.forEach(function (monthitem)
                    //{
                    //    if (item.StageCode == monthitem.StageCode && item.LossCode == monthitem.LossCode)
                    //    {
                    //        var str = monthitem.ShowDate + "'" + monthitem.YearCode;
                    //        for (var i = 0; i < data.Config.MonthConfig.length; i++) {
                    //            if (str == data.Config.MonthConfig[i]) {
                    //                appendstring += '<td>' + monthitem.Cum + '</td>'
                    //            }
                    //            else {
                    //                appendstring += '<td>' + "0" + '</td>'
                    //            }
                    //        }
                    //    }
                    //})
                    //data.WeeklyLossDataView.forEach(function (Weeklyitem) {
                    //    if (item.StageCode == Weeklyitem.StageCode && item.LossCode == Weeklyitem.LossCode) {
                    //        var str = Weeklyitem.ShowDate + "'" + Weeklyitem.YearCode;
                    //        for (var i = 0; i < data.Config.MonthConfig.length; i++) {
                    //            if (str == data.Config.WeeklyConfig[i]) {
                    //                appendstring += '<td>' + Weeklyitem.Cum + '</td>'
                    //            }
                    //            else {
                    //                appendstring += '<td>' + "0" + '</td>'
                    //            }
                    //        }
                    //    }
                    //})
                    appendstring += ErrorCodeDataString(item, data.MonthLossDataView, data.Config.MonthConfig);
                    appendstring += ErrorCodeDataString(item, data.WeeklyLossDataView, data.Config.WeeklyConfig);
                    appendstring += ErrorCodeDataString(item, data.DayLossDataView, data.Config.DayConfig);

                    appendstring += '</tr>'
                });
                return appendstring;
            }

            function DrawLineChart(data) {
                const ctx = $("#ChartJS");
                if (myLineChart) {
                    myLineChart.destroy();
                }

                var chartLabels = ['Cum'];
                var chartOverAllYield = [sumOverAllYield];
                data.forEach(function (item) {
                    chartLabels.push(item.LotNo);
                    chartOverAllYield.push(item.OverAllYield)
                });

                myLineChart = new Chart(ctx, {
                    data: {
                        labels: chartLabels,
                        datasets: [{
                            type: 'line',
                            /*label: '# of Votes',*/
                            data: chartOverAllYield,
                            /*borderWidth:1*/
                        }]
                    },
                    options: {
                        scales:
                        {
                            y:
                            {
                                beginAtZero: true,
                                ticks: {
                                    min: 0,
                                    max: 100,
                                    callback: function (value) {
                                        return value + "%"
                                    }
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Persentage"
                                }
                            },
                        },
                        plugins: {
                            legend:
                            {
                                display: false
                            }
                        }
                    }
                })
            }



            $("#YieldTable").hide();

            $("#buttonQuery").click(function () {

                if (!checkTime()) {
                    return;
                }

                var QueryCondition =
                {
                    Plant: $("#Plant").val(),
                    Cust2Code: $("#Cust2Code").val(),
                    PKGCode: $("#txtPKGCode").val(),
                    StageCode: $("#StageCode").val(),
                    DeviceName: $("#txtDeviceName").val(),
                    StartTime: $("#txtDateStart").val(),
                    EndTime: $("#txtDateEnd").val(),

                }



                $.ajax({
                    url: '../CloseYieldQuery/QueryCloseYieldSummary',
                    type: 'post',
                    dataType: 'json',
                    data: QueryCondition,
                    contentsType: 'acclication/json',
                    success: function (data) {
                        //ajax 打出成功要做的事
                        initTable();
                        //$("#queryTable > thead").remove();
                        //$("#queryTable > tbody").remove();

                        var appendstring = gettableheadstring(data.Config);

                        $table.append('<thead>').children("thead")
                            .append('<tr>').children('tr')
                            .append(appendstring);

                        //add tbody
                        var $tbody = $table.append('<tbody />').children('tbody');
                        //add row
                        appendstring = gettablestring(data);

                        $tbody.append(appendstring);

                        appendstring = ErrorCodeTableString(data);

                        $tbody.append(appendstring);

                        /*DrawLineChart(data.LotView);*/
                    },
                    error: function (data) {
                        //ajax 打出失敗要做的事
                        alert("查詢失敗，請稍後查詢。")
                    }
                });
            });

            


        });
    </script>
}

<script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

